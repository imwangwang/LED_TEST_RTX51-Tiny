A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE     1


MACRO ASSEMBLER A51 V8.01
OBJECT MODULE PLACED IN .\OUT\Conf_tny.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE RTX51\Conf_tny.A51 SET(SMALL) DEBUG PRINT(.\Conf_tny.lst) OBJECT(.\OUT\Con
                      f_tny.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     $nomod51 
                       2     ;------------------------------------------------------------------------------
                       3     ;  This file is part of the RTX-51 TINY  Real-Time Operating System Package
                       4     ;  Copyright KEIL ELEKTRONIK GmbH and Keil Software, Inc. 1991-2002
                       5     ;  Version 2.01
                       6     ;------------------------------------------------------------------------------
                       7     ;  CONF_TNY.A51:  This code allows the configuration of the
                       8     ;                 RTX-51 TINY Real-Time Operating System
                       9     ;
                      10     ;  Copy this file to your project folder and add the copy to your uVision2
                      11     ;  project.  You can customize several parameters of RTX51 Tiny within this
                      12     ;  configuration file.
                      13     ;
                      14     ;  If you use command line tools, translate this file with:
                      15     ;
                      16     ;     Ax51 CONF_TNY.A51
                      17     ;
                      18     ;  If you use command line tools, link the modified CONF_TNY.OBJ file to 
                      19     ;  your application with:
                      20     ;
                      21     ;     Lx51 <your object file list>, CONF_TNY.OBJ <controls>
                      22     ;
                      23     ;------------------------------------------------------------------------------
                      24     ;
                      25     ;  RTX-51 TINY Hardware-Timer
                      26     ;  ==========================
                      27     ;
                      28     ;  With the following EQU statements the initialization of the RTX-51 TINY
                      29     ;  Hardware-Timer can be defined (RTX-51 TINY uses the 8051 Timer 0 for 
                      30     ;  controlling RTX-51 software timers).
                      31     ;
                      32     ;  Define the register bank used for the timer interrupt.
  0001                33     INT_REGBANK     EQU     1       ; default is Registerbank 1
                      34     ;
                      35     ;  Define Hardware-Timer tick time in 8051 machine cycles.
  03E8                36     INT_CLOCK       EQU     1000    ; default is 10000 cycles
                      37     ;
                      38     ;  Define Round-Robin Timeout in Hardware-Timer ticks.
  0000                39     TIMESHARING     EQU     0       ; default is 5 Hardware-Timer ticks.
                      40     ;                               ; 0 disables Round-Robin Task Switching
                      41     ;
                      42     ;  Long User Interrupt Routines: set to 1 if your application contains 
                      43     ;  user interrupt functions that may take longer than a hardware timer 
                      44     ;  interval for execution.
  0000                45     LONG_USR_INTR   EQU     0       ; 0 user interrupts execute fast.
                      46     ;                               ; 1 user interrupts take long execution times.
                      47     ;
                      48     ;
                      49     ;------------------------------------------------------------------------------
                      50     ;
                      51     ;  USER CODE FOR 8051 HARDWARE TIMER INTERRUPT
                      52     ;  ===========================================
                      53     ;
                      54     ;  The following macro defines the code executed on a hardware timer interrupt.
                      55     ;
                      56     ;  Define instructions executed on a hardware timer interrupt.
                      57     HW_TIMER_CODE   MACRO
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE     2

                      58                                     ; Empty Macro by default
                      59                     RETI
                      60                     ENDM
                      61     ;
                      62     ;
                      63     ;------------------------------------------------------------------------------
                      64     ;
                      65     ;  CODE BANKING SUPPORT
                      66     ;  ====================
                      67     ;
                      68     ;  The following EQU statement controls the code banking support for RTX51 TINY.
                      69     ;
                      70     ;  Enable or disable code banking support
  0000                71     CODE_BANKING     EQU     0      ; 0 (default) application uses no code banking
                      72     ;                               ; 1 application uses code banking
                      73     ;
                      74     ;------------------------------------------------------------------------------
                      75     ;
                      76     ;  RTX-51 TINY Stack Space
                      77     ;  =======================
                      78     ;
                      79     ;  The following EQU statements defines the size of the internal RAM used
                      80     ;  for stack area and the minimum free space on the stack.  A macro defines
                      81     ;  the code executed when there is there is not enough free stack on the
                      82     ;  CPU stack.
                      83     ;
                      84     ;  Define the highest RAM address used for CPU stack
  00FF                85     RAMTOP          EQU     0FFH    ; default is address (256-1)
                      86     ;
  0014                87     FREE_STACK      EQU     20      ; default is 20 bytes free space on stack
                      88     ;                               ; the value 0 disables stack checking
                      89     ;
                      90     STACK_ERROR     MACRO
                      91                     CLR     EA      ; disable interrupts
                      92                     SJMP    $       ; endless loop if stack space is exhausted
                      93                     ENDM
                      94     ;
                      95     ;
                      96     ;------------------------------------------------------------------------------
                      97     ;
                      98     ;  8051 CPU IDLE CODE
                      99     ;  ==================
                     100     ;
                     101     ;  Many 8051 devices provide an IDLE MODE that reduces power consumption and
                     102     ;  EMC.  The following macro defines the code executed when there is no 
                     103     ;  ready task in the system.  The code must set the CPU into an IDLE MODE
                     104     ;  that stops instruction execution until an 8051 hardware interrupt occurs. 
                     105     ;
                     106     
                     107     ; Disable or Enable CPU_IDLE CODE
  0001               108     CPU_IDLE_CODE   EQU     1       ; 0  CPU_IDLE MACRO is not inserted
                     109                                     ; 1  CPU_IDLE MACRO is executed
                     110     
  0087               111     PCON            DATA    087H    ; Power Control SFR on most 8051 devices
                     112     
                     113     ; Stop CPU execution until hardware interrupt; executed when there is no 
                     114     ; active task in the system. 
                     115     CPU_IDLE        MACRO
                     116                     ORL     PCON,#1 ; set 8051 CPU to IDLE
                     117                     ENDM
                     118     ;
                     119     ;
                     120     ;------------------------------------------------------------------------------
                     121     ;----------------- !!! End of User Configuration Part    !!! ------------------
                     122     ;----------------- !!! Do not modify code sections below !!! ------------------
                     123     ;------------------------------------------------------------------------------
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE     3

                     124     
                     125     ; SFR Symbols
  00D0               126     PSW     DATA    0D0H
  00E0               127     ACC     DATA    0E0H
  00F0               128     B       DATA    0F0H
  0081               129     SP      DATA    81H
  0082               130     DPL     DATA    82H
  0083               131     DPH     DATA    83H
  0088               132     TCON    DATA    88H
  0089               133     TMOD    DATA    89H
  008A               134     TL0     DATA    8AH
  008B               135     TL1     DATA    8BH
  008C               136     TH0     DATA    8CH
  008D               137     TH1     DATA    8DH
  00A8               138     IE      DATA    0A8H
                     139     
                     140     ; TCON
  008F               141     TF1     BIT     8FH
  008E               142     TR1     BIT     8EH
  008D               143     TF0     BIT     8DH
  008C               144     TR0     BIT     8CH
  008B               145     IE1     BIT     8BH
  008A               146     IT1     BIT     8AH
  0089               147     IE0     BIT     89H
  0088               148     IT0     BIT     88H
                     149     ; IE 
  00AF               150     EA      BIT     0AFH
  00AC               151     ES      BIT     0ACH
  00AB               152     ET1     BIT     0ABH
  00AA               153     EX1     BIT     0AAH
  00A9               154     ET0     BIT     0A9H
  00A8               155     EX0     BIT     0A8H
                     156     
                     157     ; Check Configuration Values
                     158     
                     159     
                     160                     NAME    ?RTX51_TINY_KERNAL
                     161     
                     162     PUBLIC  ?RTX_CURRENTTASK 
                     163     PUBLIC  ?RTX_RAMTOP
                     164     PUBLIC  os_switch_task
                     165     PUBLIC  ?RTX?SET_ISR
                     166     
                     167     EXTRN   NUMBER (?RTX_MAXTASKN)          ; max Task Number
                     168     
  00FF               169     ?RTX_RAMTOP       EQU   RAMTOP
  FC18               170     ?RTX_CLOCK        EQU   -INT_CLOCK
                     171     
  0008               172     ?RTX_REGISTERBANK EQU   INT_REGBANK * 8
----                 173                       DSEG  AT    ?RTX_REGISTERBANK
0008                 174                       DS    2     ; temporary space
000A                 175     ?RTX_SAVEACC:     DS    1
  REG                176     saveacc           EQU   R2    ; for access in interrupt service routine
000B                 177     ?RTX_SAVEPSW:     DS    1
  REG                178     savepsw           EQU   R3    ; for access in interrupt service routine
000C                 179     ?RTX_CURRENTTASK: DS    1
  REG                180     currenttask       EQU   R4    ; for access in interrupt service routine
                     181     
                     182     IF (TIMESHARING <> 0)
                             ?RTX_ROBINTIME:   DS    1
                             robintime         EQU   R5    ; for access in interrupt service routine
                             ENDIF
                     186     
                     187     IF (CODE_BANKING <> 0)
                             EXTRN   DATA    (?B_CURRENTBANK)
                             EXTRN   CODE    (?B_RESTORE_BANK)
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE     4

                             ENDIF
                     191     
                     192     
                     193     ;------------------------------------------------
                     194     ; Table of Task Entry Pointers
                     195     ;------------------------------------------------
                     196     PUBLIC  ?RTX_TASKENTRY
                     197     
                     198     ?RTX?TASKENT?S  SEGMENT CODE
----                 199                     RSEG    ?RTX?TASKENT?S
0000                 200     ?RTX_TASKENTRY: DS      2
                     201     
                     202     ;------------------------------------------------
                     203     ; Table of Stack Pointers for each task
                     204     ;------------------------------------------------
                     205     PUBLIC  ?RTX_TASKSP
                     206     
                     207     ?RTX?TASKSP?S   SEGMENT IDATA
----                 208                     RSEG    ?RTX?TASKSP?S
0000                 209     ?RTX_TASKSP:    DS      1
                     210     
                     211     ;------------------------------------------------
                     212     ; Table of Task Timer/State Pointers
                     213     ;------------------------------------------------
                     214     PUBLIC  ?RTX_TASKSTATUS
                     215     
                     216     ?RTX?TASKSTATE?S  SEGMENT IDATA
----                 217                       RSEG    ?RTX?TASKSTATE?S
0000                 218     ?RTX_TASKSTATUS:
0000                 219     TimerVal:       DS      1       ; Task Timer (Software Timer for each task)
0001                 220     TaskState:      DS      1       ; Task Status (state of each Task)
                     221     
                     222     ; Definitions for Bits in Task State
                     223     ;  TaskState.0  = Wait for Signal
                     224     ;  TaskState.1  = Wait for TimeOut
                     225     ;  TaskState.2  = Signal Flag
                     226     ;  TaskState.3  = TimeOut Flag
                     227     ;  TaskState.4  = Task Ready (Wait for Running)
                     228     ;  TaskState.5  = Task Active (enabled with os_create)
                     229     ;  TaskState.6  = Round Robin Time Out
                     230     ;  TaskState.7  = Run Flag
                     231     
                     232     ; byte mask definitions
  0001               233     K_SIG           EQU     1
  0002               234     K_TMO           EQU     2
  0004               235     SIG_EVENT       EQU     4
  0008               236     TMO_EVENT       EQU     8
  0010               237     K_READY         EQU     16
  0020               238     K_ACTIVE        EQU     32
  0040               239     K_ROBIN         EQU     64
  0080               240     K_IVL           EQU     128  ; not a task state bit; only used in os_wait
  0080               241     RDY_EVENT       EQU     128  ; READY status flag
  0080               242     K_RDY           EQU     128  ; READY status flag
                     243     
                     244     ; bit position definitions
  0000               245     B_WAITSIG       EQU     0
  0001               246     B_WAITTIM       EQU     1
  0002               247     B_SIGNAL        EQU     2
  0003               248     B_TIMEOUT       EQU     3
  0004               249     B_READY         EQU     4
  0005               250     B_ACTIVE        EQU     5
  0006               251     B_ROBIN         EQU     6
  0007               252     B_IVL           EQU     7    ; not a task state bit; only used in os_wait
  0007               253     B_RDY           EQU     7
                     254     
                     255     
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE     5

                     256     IF (TIMESHARING OR CPU_IDLE_CODE)
                     257     ?RTX?BITS       SEGMENT BIT
----                 258                     RSEG    ?RTX?BITS
                     259     ENDIF
                     260     
                     261     IF (TIMESHARING)
                             ?RTX_TS_DELAY:  DBIT    1       ; Status bit set when task switch in progress
                             ENDIF
                     264     
                     265     IF (CPU_IDLE_CODE)
0000                 266     ?RTX_ISR_SIG:   DBIT    1       ; Status bit set when interrupt or os_set_signal
                     267     ENDIF
                     268     
                     269     
----                 270                     CSEG    AT      0BH
000B 020000   F      271                     JMP     TIMERINT
                     272     
                     273     ?RTX?CODE       SEGMENT CODE
----                 274                     RSEG    ?RTX?CODE
                     275                     USING   0               ; Registerbank 0 for following code
                     276     
                     277     IF (FREE_STACK <> 0)
0000                 278     ?RTX_STACKERROR:
                     279                     STACK_ERROR             ; User defined Stack Error Code
                     282     ENDIF
                     283     
0004                 284     HW_TIMER:       HW_TIMER_CODE
                     287     
0005                 288     TIMERINT:
                     289     
                     290     IF (LONG_USR_INTR)
                                             PUSH    ACC
                                             MOV     A,PSW
                                             ANL     A,#018H
                                             XRL     A,#?RTX_REGISTERBANK
                                             JNZ     CONT_TIMINT
                             ; avoid recursive timer interrupt
                                             POP     ACC
                                             RETI            ; Return from Recursive Timer Interrupt
                             CONT_TIMINT:    POP     ACC
                             
                             ENDIF
                     302     
0005 120000   F      303                     CALL    HW_TIMER        ; Enable Interrupts again.
                     304     
0008 85D00B          305                     MOV     ?RTX_SAVEPSW,PSW
000B 75D008          306                     MOV     PSW,#?RTX_REGISTERBANK
000E FA              307                     MOV     saveacc,A
                     308     ; Update 8051 Interrupt Timer
000F C28C            309                     CLR     TR0
0011 E58A            310                     MOV     A,TL0
0013 241F            311                     ADD     A,#LOW (?RTX_CLOCK + 7)
0015 F58A            312                     MOV     TL0,A
0017 E58C            313                     MOV     A,TH0
0019 34FC            314                     ADDC    A,#HIGH (?RTX_CLOCK + 7)
001B F58C            315                     MOV     TH0,A
001D D28C            316                     SETB    TR0
                     317     
                     318     IF (FREE_STACK <> 0)
                     319     ; Check if enough free stack is available
001F EC              320                     MOV     A,currenttask
0020 2400     F      321                     ADD     A,#?RTX?TASKSP?S+1
0022 F8              322                     MOV     R0,A
0023 E6              323                     MOV     A,@R0
0024 BC0002   F      324                     CJNE    currenttask,#?RTX_MAXTASKN,checkstack
0027 74FF            325                     MOV     A,#RAMTOP
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE     6

0029 C3              326     checkstack:     CLR     C
002A 9581            327                     SUBB    A,SP
002C B41400          328                     CJNE    A,#FREE_STACK,$+3
002F 40CF            329                     JC      ?RTX_STACKERROR
                     330     ENDIF
                     331     
                     332     ; Update & Check Task Timers
0031 7900     F      333                     MOV     R1,#?RTX_MAXTASKN+1
0033 7800     F      334                     MOV     R0,#?RTX?TASKSTATE?S
0035 16              335     TIMERLOOP:      DEC     @R0          ; Decrement timer
0036 E6              336                     MOV     A,@R0
0037 08              337                     INC     R0           ; advance to TaskState
0038 700B            338                     JNZ     NoTimeout
003A C2AF            339                     CLR     EA
003C E6              340                     MOV     A,@R0
003D 30E103          341                     JNB     ACC.B_WAITTIM,NoWaitTimeout
0040 4418            342                     ORL     A,#(K_READY+TMO_EVENT)
0042 F6              343                     MOV     @R0,A
0043 D2AF            344     NoWaitTimeout:  SETB    EA
0045 08              345     NoTimeout:      INC     R0           ; advance to TaskTimer
0046 D9ED            346                     DJNZ    R1,TIMERLOOP
                     347     
0048 EA              348                     MOV     A,saveacc
0049 8BD0            349                     MOV     PSW,savepsw
                     350                     USING   0               ; Registerbank 0 for following code
                     351     
                     352     IF (TIMESHARING == 0)
                     353     ; Round Robin Task Switching not required.  System Interrupt ends here
004B                 354     ?RTX?SET_ISR:   
                     355     IF (CPU_IDLE_CODE)
004B D200     F      356                     SETB    ?RTX_ISR_SIG
                     357     ENDIF
004D 22              358                     RET     
                     359     ENDIF
                     360     
                     361     IF (TIMESHARING)
                             ; Round Robin Task Switching required.  Check if task generates timeout
                             ; Check for Round Robin Timeout on the current task
                                             JNB     ?RTX_TS_DELAY,CheckRobinTime
                             NoRobinTimeout: 
                             ?RTX?SET_ISR:   
                             IF (CPU_IDLE_CODE)
                                             SETB    ?RTX_ISR_SIG
                             ENDIF
                                             RET     
                             CheckRobinTime: DJNZ     ?RTX_ROBINTIME,NoRobinTimeout
                             
                             ?RTX_TASKSWITCHING:
                                             PUSH    ACC
                                             PUSH    PSW
                                             PUSH    B
                                             PUSH    DPH
                                             PUSH    DPL
                                             PUSH    AR0
                                             PUSH    AR1
                                             PUSH    AR2
                                             PUSH    AR3
                                             PUSH    AR4
                                             PUSH    AR5
                                             PUSH    AR6
                                             PUSH    AR7
                             IF (CODE_BANKING <> 0)
                                             PUSH    ?B_CURRENTBANK
                             ENDIF
                             
                                             MOV     A,?RTX_CURRENTTASK
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE     7

                                             RL      A
                                             ADD     A,#?RTX?TASKSTATE?S+1
                                             MOV     R0,A
                                             MOV     A,#K_ROBIN
                                             CLR     EA
                                             ORL     A,@R0
                                             MOV     @R0,A
                                             SETB    EA
                             IF (CODE_BANKING <> 0)
                                             SJMP    os_switch_task1
                             ENDIF
                             ENDIF
                     404     
                     405     ;------------------------------------------------
                     406     ; Perform a Task-Switch
                     407     ;  void os_switch_task (void)
                     408     ;      uchar i;
                     409     ;      uchar limit;
                     410     
                     411     ;---- Variable 'current' assigned to Register 'R6' ----
                     412     ;---- Variable 'next' assigned to Register 'R7' ----
                     413     ;---- Variable 'i' assigned to Register 'R0' ----
                     414     ;---- Variable 'limit' assigned to Register 'R5' ----
                     415     ;
                     416     ;------------------------------------------------
                     417     
004E                 418     os_switch_task:
                     419     
                     420     IF (CODE_BANKING <> 0)
                                             PUSH    ?B_CURRENTBANK
                             ENDIF
                     423     
004E                 424     os_switch_task1:
                     425     
                     426     ;      next = current;
                     427     IF (TIMESHARING <> 0)
                                             SETB    ?RTX_TS_DELAY           ; Delay Task Switching
                             ENDIF
004E E50C            430                     MOV     A,?RTX_CURRENTTASK
0050 FF              431                     MOV     R7,A
                     432     ;      while (1)  {
0051 23              433                     RL      A
0052 2400     F      434                     ADD     A,#?RTX?TASKSTATE?S+1
0054 F8              435                     MOV     R0,A
0055                 436     ?C0001:
                     437     ;        if (++next == MAXTASKN+1)  next = 0;
0055 0F              438                     INC     R7
0056 08              439                     INC     R0
0057 08              440                     INC     R0
                     441     IF (CPU_IDLE_CODE)
0058 EF              442                     MOV     A,R7
0059 B50C06          443                     CJNE    A,?RTX_CURRENTTASK,NoIDLE
005C 100003   F      444                     JBC     ?RTX_ISR_SIG,NoIDLE
                     445                     CPU_IDLE          ; CPU sleep
0062                 447     NoIDLE:
                     448     ENDIF
0062 BF0004   F      449                     CJNE    R7,#?RTX_MAXTASKN+1,?C0003
0065 7F00            450                     MOV     R7,#0
0067 7800     F      451                     MOV     R0,#?RTX?TASKSTATE?S+1
0069                 452     ?C0003:
                     453     ;        if (STATE[next].st & K_READY)  break;
0069 E6              454                     MOV     A,@R0
006A 30E4E8          455                     JNB     ACC.B_READY,?C0001
                     456     ;      }
                     457     ;
                     458     
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE     8

                     459     PUBLIC  ?RTX_NEXTID
                     460     PUBLIC  ?RTX_NEXTTASK
                     461     
  0007               462     ?RTX_NEXTID     EQU     AR7
006D 00              463     ?RTX_NEXTTASK:  NOP             ; for Debugging
                     464     
                     465     ;      while (current < next)  {
006E                 466     ?C0005:
006E E50C            467                     MOV     A,?RTX_CURRENTTASK
0070 C3              468                     CLR     C
0071 9F              469                     SUBB    A,R7
0072 5020            470                     JNC     ?C0011
                     471     
                     472     ;        current++;
0074 050C            473                     INC     ?RTX_CURRENTTASK
                     474     ;        i = STKP[current];
0076 7400     F      475                     MOV     A,#?RTX?TASKSP?S
0078 250C            476                     ADD     A,?RTX_CURRENTTASK
007A F8              477                     MOV     R0,A
007B E6              478                     MOV     A,@R0
007C FD              479                     MOV     R5,A
                     480     ;        STKP[current] = SP;
007D A681            481                     MOV     @R0,SP
                     482     ;        if (current == MAXTASKN) limit = RAMTOP;
007F 08              483                     INC     R0
0080 E6              484                     MOV     A,@R0
0081 AE0C            485                     MOV     R6,?RTX_CURRENTTASK
0083 BE0002   F      486                     CJNE    R6,#?RTX_MAXTASKN,?C0007
0086 74FF            487                     MOV     A,#RAMTOP
0088                 488     ?C0007:
0088 CD              489                     XCH     A,R5
0089 F8              490                     MOV     R0,A
                     491     ;        else                       limit = STKP[current+1];
                     492     ;
                     493     ;        while (i != limit)  {
008A                 494     ?C0009:
008A E8              495                     MOV     A,R0
008B 6D              496                     XRL     A,R5
008C 60E0            497                     JZ      ?C0005
                     498     ;          SP++;
                     499     ;          i++;
                     500     ;          STACK[SP] = STACK[i];
008E 08              501                     INC     R0
008F E6              502                     MOV     A,@R0
0090 C0E0            503                     PUSH    ACC
0092 80F6            504                     SJMP    ?C0009
                     505     ;        }
                     506     ;      }
0094                 507     ?C0011:
                     508     ;
                     509     ;      while (current > next)  {
0094 E50C            510                     MOV     A,?RTX_CURRENTTASK
0096 D3              511                     SETB    C
0097 9F              512                     SUBB    A,R7
0098 4027            513                     JC      ?C0012
                     514             
009A E50C            515                     MOV     A,?RTX_CURRENTTASK
009C 2400     F      516                     ADD     A,#?RTX?TASKSP?S+1
009E F8              517                     MOV     R0,A
009F E6              518                     MOV     A,@R0
                     519     ;        if (current == (MAXTASKN)) i = RAMTOP;
                     520     ;        else                       i = STKP[current+1];
00A0 AE0C            521                     MOV     R6,?RTX_CURRENTTASK
00A2 BE0002   F      522                     CJNE    R6,#?RTX_MAXTASKN,?C0013
00A5 74FF            523                     MOV     A,#RAMTOP
00A7                 524     ?C0013:
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE     9

00A7 FD              525                     MOV     R5,A
                     526     ;        limit = STKP[current];
00A8 18              527                     DEC     R0
00A9 E6              528                     MOV     A,@R0
00AA CD              529                     XCH     A,R5
00AB F8              530                     MOV     R0,A
                     531     ;
                     532     ;        while (SP != limit)  {
00AC                 533     ?C0015:
00AC E581            534                     MOV     A,SP
00AE 6D              535                     XRL     A,R5
00AF 6006            536                     JZ      ?C0016
                     537     ;          STACK[i] = STACK[SP];
                     538     ;          i--;
                     539     ;          SP--;
00B1 D0E0            540                     POP     ACC
00B3 F6              541                     MOV     @R0,A
00B4 18              542                     DEC     R0
                     543     
00B5 80F5            544                     SJMP    ?C0015
00B7                 545     ?C0016:
                     546     ;        }
                     547     ;        STKP[current] = i;
00B7 E50C            548                     MOV     A,?RTX_CURRENTTASK
00B9 2400     F      549                     ADD     A,#?RTX?TASKSP?S
00BB C8              550                     XCH     A,R0
00BC F6              551                     MOV     @R0,A
                     552     ;        current--;
00BD 150C            553                     DEC     ?RTX_CURRENTTASK
00BF 80D3            554                     SJMP    ?C0011
00C1                 555     ?C0012:
                     556     ;      }
                     557     
                     558     ;      RoundRobinTime = ?RTX_TIMESHARING
                     559     IF (TIMESHARING)
                                             MOV     ?RTX_ROBINTIME,#TIMESHARING
                             ENDIF
                     562              
                     563     ;       if (STATE[current].st & K_ROBIN)  goto RobinOn;
00C1 E50C            564                     MOV     A,?RTX_CURRENTTASK
00C3 23              565                     RL      A
00C4 2400     F      566                     ADD     A,#?RTX?TASKSTATE?S+1
00C6 F8              567                     MOV     R0,A
00C7 7F04            568                     MOV     R7,#SIG_EVENT
00C9 C2AF            569                     CLR     EA
00CB E6              570                     MOV     A,@R0
                     571     IF (TIMESHARING)
                                             JBC     ACC.B_ROBIN,RobinOn
                             ENDIF
                     574     ;       if ((STATE[current].st & K_SIG) && (STATE[current].st & SIG_EVENT)
                     575     ;          goto SignalOn;
00CC 30E003          576                     JNB     ACC.B_WAITSIG,SignalOff
00CF 10E20C          577                     JBC     ACC.B_SIGNAL,SignalOn
00D2                 578     SignalOff:
                     579     ;       if ((STATE[current].st & K_TMO) && (STATE[current].st & TMO_EVENT)
                     580     ;          goto TimeOutOn;
00D2 7F00            581                     MOV     R7,#0           ; No Event
00D4 30E107          582                     JNB     ACC.B_WAITTIM,NoEvent
00D7 30E304          583                     JNB     ACC.B_TIMEOUT,NoEvent
00DA                 584     TimeOutOn:      
00DA 7F08            585                     MOV     R7,#TMO_EVENT
00DC 54F4            586                     ANL     A,#0F4H
00DE                 587     SignalOn:
00DE C2E7            588     NoEvent:        CLR     ACC.B_RDY       ; Clear RDY bit
00E0 C6              589                     XCH     A,@R0
00E1 D2AF            590                     SETB    EA
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE    10

                     591     
00E3 5480            592                     ANL     A,#K_RDY
00E5 4207            593                     ORL     AR7,A
                     594     IF (TIMESHARING <> 0)
                               IF (CODE_BANKING)
                                             POP     ACC
                                             CALL    ?B_RESTORE_BANK
                               ENDIF
                                             CLR     ?RTX_TS_DELAY
                                             RET
                             ELSE
                     602       IF (CODE_BANKING)
                                             POP     ACC
                                             JMP     ?B_RESTORE_BANK
                               ENDIF
00E7 22              606                     RET
                     607     ENDIF
                     608                     
                     609                     
                     610     
                     611     ;------------------------------------------------
                     612     IF (TIMESHARING <> 0)
                             RobinOn:        MOV     @R0,A
                                             SETB    EA
                             IF (CODE_BANKING)
                                             POP     ACC
                                             CALL    ?B_RESTORE_BANK
                             ENDIF
                                             POP     AR7
                                             POP     AR6
                                             POP     AR5
                                             POP     AR4
                                             POP     AR3
                                             POP     AR2
                                             POP     AR1
                                             POP     AR0
                                             POP     DPL
                                             POP     DPH
                                             POP     B
                                             POP     PSW
                                             POP     ACC
                                             CLR     ?RTX_TS_DELAY
                                             RET                     ; Restart Task
                             ENDIF
                     635     ;    }
                     636     ;  }
                     637     
                     638     
                     639     
                     640     ;------------------------------------------------
                     641     ; Start RTX-51 Tiny Kernel
                     642     ;------------------------------------------------
                     643     
                     644     EXTRN CODE (?C_STARTUP)
                     645     PUBLIC  main
                     646     
00E8 7800     F      647     main:           MOV     R0,#?RTX?TASKSP?S
00EA A681            648                     MOV     @R0,SP
00EC 7400     F      649                     MOV     A,#?RTX_MAXTASKN
00EE 6006            650                     JZ      main2
00F0 FF              651                     MOV     R7,A
00F1 08              652     main1:          INC     R0
00F2 76FF            653                     MOV     @R0,#RAMTOP
00F4 DFFB            654                     DJNZ    R7,main1
00F6 7F00     F      655     main2:          MOV     R7,#?RTX_MAXTASKN+1
00F8 E4              656                     CLR     A
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE    11

00F9 7800     F      657                     MOV     R0,#?RTX?TASKSTATE?S
00FB F6              658     main1x:         MOV     @R0,A
00FC 08              659                     INC     R0
00FD F6              660                     MOV     @R0,A
00FE 08              661                     INC     R0
00FF DFFA            662                     DJNZ    R7,main1x
0101 7800     F      663                     MOV     R0,#?RTX?TASKSTATE?S+1
0103 7630            664                     MOV     @R0,#K_ACTIVE+K_READY
0105 900000   F      665                     MOV     DPTR,#?RTX?TASKENT?S
0108 7401            666                     MOV     A,#1
010A 93              667                     MOVC    A,@A+DPTR
010B C0E0            668                     PUSH    ACC
010D E4              669                     CLR     A
010E 93              670                     MOVC    A,@A+DPTR
010F C0E0            671                     PUSH    ACC
                     672     IF (TIMESHARING <> 0)
                                             MOV     ?RTX_ROBINTIME,#TIMESHARING
                             ENDIF
0111 438901          675                     ORL     TMOD,#01H       ; Timer 0 Mode 1
0114 758A18          676                     MOV     TL0,#LOW (?RTX_CLOCK)
0117 758CFC          677                     MOV     TH0,#HIGH (?RTX_CLOCK)
011A D28C            678                     SETB    TR0
011C D2AF            679                     SETB    EA
011E D2A9            680                     SETB    ET0
0120 22              681                     RET             ; Start Task 0
                     682     
                     683     
                     684     ;------------------------------------------------
                     685     
                     686     PUBLIC ?RTX_TASKIDX
0121 00       F      687     ?RTX_TASKIDX:   DB      ?RTX_MAXTASKN           ; for Debugging
                     688     
                     689                     END
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE    12

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

?C0001 . . . . . .  C ADDR   0055H   R   SEG=?RTX?CODE
?C0003 . . . . . .  C ADDR   0069H   R   SEG=?RTX?CODE
?C0005 . . . . . .  C ADDR   006EH   R   SEG=?RTX?CODE
?C0007 . . . . . .  C ADDR   0088H   R   SEG=?RTX?CODE
?C0009 . . . . . .  C ADDR   008AH   R   SEG=?RTX?CODE
?C0011 . . . . . .  C ADDR   0094H   R   SEG=?RTX?CODE
?C0012 . . . . . .  C ADDR   00C1H   R   SEG=?RTX?CODE
?C0013 . . . . . .  C ADDR   00A7H   R   SEG=?RTX?CODE
?C0015 . . . . . .  C ADDR   00ACH   R   SEG=?RTX?CODE
?C0016 . . . . . .  C ADDR   00B7H   R   SEG=?RTX?CODE
?C_STARTUP . . . .  C ADDR   -----       EXT
?RTX51_TINY_KERNAL  N NUMB   -----       
?RTX?BITS. . . . .  B SEG    0001H       REL=UNIT
?RTX?CODE. . . . .  C SEG    0122H       REL=UNIT
?RTX?SET_ISR . . .  C ADDR   004BH   R   SEG=?RTX?CODE
?RTX?TASKENT?S . .  C SEG    0002H       REL=UNIT
?RTX?TASKSP?S. . .  I SEG    0001H       REL=UNIT
?RTX?TASKSTATE?S .  I SEG    0002H       REL=UNIT
?RTX_CLOCK . . . .  N NUMB   FC18H   A   
?RTX_CURRENTTASK .  D ADDR   000CH   A   
?RTX_ISR_SIG . . .  B ADDR   0000H.0 R   SEG=?RTX?BITS
?RTX_MAXTASKN. . .  N ADDR   -----       EXT
?RTX_NEXTID. . . .  D ADDR   0007H   A   
?RTX_NEXTTASK. . .  C ADDR   006DH   R   SEG=?RTX?CODE
?RTX_RAMTOP. . . .  N NUMB   00FFH   A   
?RTX_REGISTERBANK.  N NUMB   0008H   A   
?RTX_SAVEACC . . .  D ADDR   000AH   A   
?RTX_SAVEPSW . . .  D ADDR   000BH   A   
?RTX_STACKERROR. .  C ADDR   0000H   R   SEG=?RTX?CODE
?RTX_TASKENTRY . .  C ADDR   0000H   R   SEG=?RTX?TASKENT?S
?RTX_TASKIDX . . .  C ADDR   0121H   R   SEG=?RTX?CODE
?RTX_TASKSP. . . .  I ADDR   0000H   R   SEG=?RTX?TASKSP?S
?RTX_TASKSTATUS. .  I ADDR   0000H   R   SEG=?RTX?TASKSTATE?S
ACC. . . . . . . .  D ADDR   00E0H   A   
AR7. . . . . . . .  D ADDR   0007H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
B_ACTIVE . . . . .  N NUMB   0005H   A   
B_IVL. . . . . . .  N NUMB   0007H   A   
B_RDY. . . . . . .  N NUMB   0007H   A   
B_READY. . . . . .  N NUMB   0004H   A   
B_ROBIN. . . . . .  N NUMB   0006H   A   
B_SIGNAL . . . . .  N NUMB   0002H   A   
B_TIMEOUT. . . . .  N NUMB   0003H   A   
B_WAITSIG. . . . .  N NUMB   0000H   A   
B_WAITTIM. . . . .  N NUMB   0001H   A   
CHECKSTACK . . . .  C ADDR   0029H   R   SEG=?RTX?CODE
CODE_BANKING . . .  N NUMB   0000H   A   
CPU_IDLE_CODE. . .  N NUMB   0001H   A   
CURRENTTASK. . . .    REG    R4          
DPH. . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
ET0. . . . . . . .  B ADDR   00A8H.1 A   
ET1. . . . . . . .  B ADDR   00A8H.3 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
FREE_STACK . . . .  N NUMB   0014H   A   
HW_TIMER . . . . .  C ADDR   0004H   R   SEG=?RTX?CODE
IE . . . . . . . .  D ADDR   00A8H   A   
A51 MACRO ASSEMBLER  CONF_TNY                                                             03/05/2015 22:21:41 PAGE    13

IE0. . . . . . . .  B ADDR   0088H.1 A   
IE1. . . . . . . .  B ADDR   0088H.3 A   
INT_CLOCK. . . . .  N NUMB   03E8H   A   
INT_REGBANK. . . .  N NUMB   0001H   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
K_ACTIVE . . . . .  N NUMB   0020H   A   
K_IVL. . . . . . .  N NUMB   0080H   A   
K_RDY. . . . . . .  N NUMB   0080H   A   
K_READY. . . . . .  N NUMB   0010H   A   
K_ROBIN. . . . . .  N NUMB   0040H   A   
K_SIG. . . . . . .  N NUMB   0001H   A   
K_TMO. . . . . . .  N NUMB   0002H   A   
LONG_USR_INTR. . .  N NUMB   0000H   A   
MAIN . . . . . . .  C ADDR   00E8H   R   SEG=?RTX?CODE
MAIN1. . . . . . .  C ADDR   00F1H   R   SEG=?RTX?CODE
MAIN1X . . . . . .  C ADDR   00FBH   R   SEG=?RTX?CODE
MAIN2. . . . . . .  C ADDR   00F6H   R   SEG=?RTX?CODE
NOEVENT. . . . . .  C ADDR   00DEH   R   SEG=?RTX?CODE
NOIDLE . . . . . .  C ADDR   0062H   R   SEG=?RTX?CODE
NOTIMEOUT. . . . .  C ADDR   0045H   R   SEG=?RTX?CODE
NOWAITTIMEOUT. . .  C ADDR   0043H   R   SEG=?RTX?CODE
OS_SWITCH_TASK . .  C ADDR   004EH   R   SEG=?RTX?CODE
OS_SWITCH_TASK1. .  C ADDR   004EH   R   SEG=?RTX?CODE
PCON . . . . . . .  D ADDR   0087H   A   
PSW. . . . . . . .  D ADDR   00D0H   A   
RAMTOP . . . . . .  N NUMB   00FFH   A   
RDY_EVENT. . . . .  N NUMB   0080H   A   
SAVEACC. . . . . .    REG    R2          
SAVEPSW. . . . . .    REG    R3          
SIGNALOFF. . . . .  C ADDR   00D2H   R   SEG=?RTX?CODE
SIGNALON . . . . .  C ADDR   00DEH   R   SEG=?RTX?CODE
SIG_EVENT. . . . .  N NUMB   0004H   A   
SP . . . . . . . .  D ADDR   0081H   A   
TASKSTATE. . . . .  I ADDR   0001H   R   SEG=?RTX?TASKSTATE?S
TCON . . . . . . .  D ADDR   0088H   A   
TF0. . . . . . . .  B ADDR   0088H.5 A   
TF1. . . . . . . .  B ADDR   0088H.7 A   
TH0. . . . . . . .  D ADDR   008CH   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TIMEOUTON. . . . .  C ADDR   00DAH   R   SEG=?RTX?CODE
TIMERINT . . . . .  C ADDR   0005H   R   SEG=?RTX?CODE
TIMERLOOP. . . . .  C ADDR   0035H   R   SEG=?RTX?CODE
TIMERVAL . . . . .  I ADDR   0000H   R   SEG=?RTX?TASKSTATE?S
TIMESHARING. . . .  N NUMB   0000H   A   
TL0. . . . . . . .  D ADDR   008AH   A   
TL1. . . . . . . .  D ADDR   008BH   A   
TMOD . . . . . . .  D ADDR   0089H   A   
TMO_EVENT. . . . .  N NUMB   0008H   A   
TR0. . . . . . . .  B ADDR   0088H.4 A   
TR1. . . . . . . .  B ADDR   0088H.6 A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
